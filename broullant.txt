
'''''
import numpy as np
import itertools

def letter_to_number(letter):
    return ord(letter.upper()) - ord('A')

def number_to_letter(number):
    return chr(number % 26 + ord('A'))

def generate_all_possible_keys(block_size):
    """Génère toutes les combinaisons de clés possibles"""
    return itertools.product(range(26), repeat=block_size*block_size)

def is_key_valid(key, block_size):
    """Vérifie si la clé est valide (inversible)"""
    key_matrix = np.array(key).reshape((block_size, block_size))
    
    # Calcul du déterminant
    det = int(round(np.linalg.det(key_matrix)))
    
    # Vérification de l'inversibilité modulo 26
    return np.gcd(det, 26) == 1

def decrypt_Hill(ciphertext, key, block_size):
    """Déchiffrement avec une clé de Hill"""
    # Conversion du texte chiffré en nombres
    cipher_nums = np.array([letter_to_number(c) for c in ciphertext])
    cipher_nums = cipher_nums.reshape((len(cipher_nums) // block_size, block_size)).T
    
    # Calcul de l'inverse de la clé
    key_matrix = np.array(key).reshape((block_size, block_size))
    key_inv = np.linalg.inv(key_matrix)
    key_inv = np.round(key_inv * round(np.linalg.det(key_matrix))).astype(int) % 26
    
    # Déchiffrement
    decrypted_nums = (np.dot(key_inv, cipher_nums) % 26).T.flatten()
    
    # Conversion en lettres
    decrypted_text = ''.join([number_to_letter(num) for num in decrypted_nums])
    
    return decrypted_text

def find_all_decryptions(ciphertext, block_size=2, max_results=100):
    """Trouve tous les déchiffrements possibles"""
    possible_decryptions = []
    
    # Générer toutes les clés possibles
    for key_values in generate_all_possible_keys(block_size):
        # Vérifier la validité de la clé
        if not is_key_valid(key_values, block_size):
            continue
        
        try:
            # Déchiffrer le texte
            decrypted_text = decrypt_Hill(ciphertext, key_values, block_size)
            
            # Ajouter le résultat
            possible_decryptions.append({
                'key': np.array(key_values).reshape((block_size, block_size)),
                'decrypted_text': decrypted_text
            })
            
            # Limiter le nombre de résultats
            if len(possible_decryptions) >= max_results:
                break
        
        except Exception:
            continue
    
    return possible_decryptions

def main():
    # Liste des ciphertexts à tester
    ciphertexts = [   
        "GDKKNZ",    
    ]
    
    # Paramètres
    block_size = 2
    max_results = 50  # Nombre maximum de résultats à afficher
    
    # Tester chaque ciphertext
    for ciphertext in ciphertexts:
        print("\n" + "="*50)
        print(f"Analyse du ciphertext : {ciphertext}")
        print("="*50)
        
        # Trouver tous les déchiffrements possibles
        decryptions = find_all_decryptions(ciphertext, block_size, max_results)
        
        # Afficher les résultats
        for i, result in enumerate(decryptions, 1):
            print(f"\nPossibilité {i}:")
            print("Clé :")
            print(result['key'])
            print("Texte déchiffré :", result['decrypted_text'])

if __name__ == "__main__":
    main()
'''
#ne marche pass !!
'''''
import numpy as np
import itertools
import re

# Fréquences des lettres en français
FRENCH_LETTER_FREQ = {
    'E': 0.1772, 'A': 0.0812, 'I': 0.0729, 'N': 0.0691, 'R': 0.0643,
    'S': 0.0630, 'O': 0.0632, 'T': 0.0696, 'L': 0.0496, 'U': 0.0628,
    'D': 0.0350, 'C': 0.0318, 'M': 0.0261, 'P': 0.0246, 'G': 0.0127
}

# Liste de mots français courants pour validation
FRENCH_WORDS = {
    'le', 'la', 'un', 'une', 'et', 'de', 'du', 'en', 'sur', 'par', 
    'pour', 'dans', 'que', 'qui', 'sont', 'avoir', 'faire', 'dire', 
    'voir', 'etre', 'tres', 'plus', 'tres', 'aussi', 'encore'
}

def letter_to_number(letter):
    return ord(letter.upper()) - ord('A')

def number_to_letter(number):
    return chr(number % 26 + ord('A'))

def generate_all_possible_keys(block_size):
    """Génère toutes les combinaisons de clés possibles"""
    return itertools.product(range(26), repeat=block_size*block_size)

def is_key_valid(key, block_size):
    """Vérifie si la clé est valide (inversible)"""
    key_matrix = np.array(key).reshape((block_size, block_size))
    
    # Calcul du déterminant
    det = int(round(np.linalg.det(key_matrix)))
    
    # Vérification de l'inversibilité modulo 26
    return np.gcd(det, 26) == 1

def decrypt_Hill(ciphertext, key, block_size):
    """Déchiffrement avec une clé de Hill"""
    # Conversion du texte chiffré en nombres
    cipher_nums = np.array([letter_to_number(c) for c in ciphertext])
    cipher_nums = cipher_nums.reshape((len(cipher_nums) // block_size, block_size)).T
    
    # Calcul de l'inverse de la clé
    key_matrix = np.array(key).reshape((block_size, block_size))
    key_inv = np.linalg.inv(key_matrix)
    key_inv = np.round(key_inv * round(np.linalg.det(key_matrix))).astype(int) % 26
    
    # Déchiffrement
    decrypted_nums = (np.dot(key_inv, cipher_nums) % 26).T.flatten()
    
    # Conversion en lettres
    decrypted_text = ''.join([number_to_letter(num) for num in decrypted_nums])
    
    return decrypted_text

def score_decryption(decrypted_text):
    """
    Scorer la vraisemblance du déchiffrement
    - Basé sur la fréquence des lettres
    - Présence de mots français
    - Utilisation de lettres françaises
    """
    # Score de fréquence des lettres
    freq_score = 0
    total_letters = len(decrypted_text)
    letter_counts = {}
    
    # Compter les occurrences de lettres
    for char in decrypted_text.upper():
        if char.isalpha():
            letter_counts[char] = letter_counts.get(char, 0) + 1
    
    # Comparaison avec les fréquences françaises
    for char, count in letter_counts.items():
        freq = count / total_letters
        expected_freq = FRENCH_LETTER_FREQ.get(char, 0)
        freq_score += abs(freq - expected_freq)
    
    # Score de mots français
    word_score = 0
    for word in FRENCH_WORDS:
        if word in decrypted_text.lower():
            word_score += 1
    
    # Score final : moins le score est bas, plus le déchiffrement est probable
    return -(freq_score + word_score * 0.5)

def find_probabilistic_decryptions(ciphertext, block_size=2, top_results=100):
    """Trouve les déchiffrements les plus probables"""
    possible_decryptions = []
    
    # Générer toutes les clés possibles
    for key_values in generate_all_possible_keys(block_size):
        # Vérifier la validité de la clé
        if not is_key_valid(key_values, block_size):
            continue
        
        try:
            # Déchiffrer le texte
            decrypted_text = decrypt_Hill(ciphertext, key_values, block_size)
            
            # Scorer le déchiffrement
            score = score_decryption(decrypted_text)
            
            # Ajouter le résultat
            possible_decryptions.append({
                'key': np.array(key_values).reshape((block_size, block_size)),
                'decrypted_text': decrypted_text,
                'score': score
            })
        
        except Exception:
            continue
    
    # Trier par score (du plus probable au moins probable)
    possible_decryptions.sort(key=lambda x: x['score'], reverse=True)
    
    return possible_decryptions[:top_results]

def main():
    # Liste des ciphertexts à tester
    ciphertexts = [
        "GDKKNZ"
    ]
    
    # Paramètres
    block_size = 2
    top_results = 50  # Nombre de meilleurs résultats à afficher
    
    # Tester chaque ciphertext
    for ciphertext in ciphertexts:
        print("\n" + "="*50)
        print(f"Analyse probabiliste du ciphertext : {ciphertext}")
        print("="*50)
        
        # Trouver les déchiffrements les plus probables
        decryptions = find_probabilistic_decryptions(ciphertext, block_size, top_results)
        
        # Afficher les résultats
        for i, result in enumerate(decryptions, 1):
            print(f"\nPossibilité {i} (Score : {result['score']:.4f}):")
            print("Clé :")
            print(result['key'])
            print("Texte déchiffré :", result['decrypted_text'])

if __name__ == "__main__":
    main()
'''

'''''
import numpy as np
from collections import Counter
import itertools

# --- Étape 1 : Définir les paramètres de la langue (fréquences) ---
# Digrammes les plus fréquents en français
frequent_digrams = ["ES", "DE", "LE", "EN", "RE", "ET", "LA"]

# --- Étape 2 : Fonction d'encodage des lettres en nombres ---
def letter_to_number(text):
    return [ord(char) - ord('A') for char in text]

def number_to_letter(numbers):
    return ''.join(chr(n + ord('A')) for n in numbers)

# --- Étape 3 : Analyser la fréquence des digrammes ---
def find_frequent_digrams(ciphertext):
    digrams = [ciphertext[i:i+2] for i in range(0, len(ciphertext), 2)]
    return Counter(digrams).most_common(5)

# --- Étape 4 : Résoudre l'équation matricielle ---
# Inversion modulaire (mod 26)
def mod_inverse_matrix(matrix, mod):
    det = int(round(np.linalg.det(matrix)))
    det_inv = pow(det, -1, mod)  # Inverse modulaire du déterminant
    adjugate = np.round(det * np.linalg.inv(matrix)).astype(int) % mod
    return (det_inv * adjugate) % mod

# --- Étape 5 : Déchiffrement avec une matrice ---
def decrypt_hill(ciphertext, key_matrix):
    plaintext = []
    ciphertext_numbers = letter_to_number(ciphertext)

    for i in range(0, len(ciphertext_numbers), len(key_matrix)):
        block = np.array(ciphertext_numbers[i:i+len(key_matrix)])
        decrypted_block = np.dot(mod_inverse_matrix(key_matrix, 26), block) % 26
        plaintext.extend(decrypted_block)

    return number_to_letter(plaintext)

# --- Étape 6 : Brute-force des digrammes ---
def attack_hill(ciphertext):
    cipher_digrams = find_frequent_digrams(ciphertext)
    print(f"Digrammes fréquents : {cipher_digrams}")

    for digram_pair in itertools.permutations(frequent_digrams, 2):
        print(f"Test avec : {digram_pair}")
        try:
            P = np.array([letter_to_number(digram_pair[0]),
                          letter_to_number(digram_pair[1])]).T
            C = np.array([letter_to_number(cipher_digrams[0][0]),
                          letter_to_number(cipher_digrams[1][0])]).T

            key_matrix = np.dot(C, mod_inverse_matrix(P, 26)) % 26
            print(f"Matrice candidate : \n{key_matrix}")

            plaintext = decrypt_hill(ciphertext, key_matrix)
            print(f"Tentative : {plaintext}")

        except Exception as e:
            continue

# --- Exemple d'utilisation ---
ciphertext = "FTPAWK"
attack_hill(ciphertext)
'''
'''''
import numpy as np
from sympy import Matrix, mod_inverse
import itertools

# Fréquences des lettres en français
FRENCH_LETTER_FREQ = {
    'E': 0.1772, 'A': 0.0812, 'I': 0.0729, 'N': 0.0691, 'R': 0.0643,
    'S': 0.0630, 'O': 0.0632, 'T': 0.0696, 'L': 0.0496, 'U': 0.0628,
    'D': 0.0350, 'C': 0.0318, 'M': 0.0261, 'P': 0.0246, 'G': 0.0127,
    'B': 0.0119, 'V': 0.0111, 'H': 0.0110, 'F': 0.0110, 'Q': 0.0065,
    'W': 0.0018, 'Z': 0.0016, 'X': 0.0037, 'J': 0.0034, 'Y': 0.0024, 
    'K': 0.0008
}

def letter_to_number(letter):
    return ord(letter.upper()) - ord('A')

def number_to_letter(number):
    return chr(number % 26 + ord('A'))

def is_invertible_mod26(matrix):
    """Vérification rigoureuse de l'inversibilité modulo 26"""
    m = Matrix(matrix)
    det = m.det()
    try:
        mod_inverse(int(det) % 26, 26)
        return True
    except ValueError:
        return False

def matrix_mod_inverse(matrix, modulus=26):
    """Calcul de l'inverse modulaire d'une matrice"""
    m = Matrix(matrix)
    det = m.det()
    
    det_mod = int(det) % modulus
    det_inv = mod_inverse(det_mod, modulus)
    adj = m.adjugate()
    
    inv = (det_inv * adj) % modulus
    return np.array(inv).astype(int)

def calculate_text_freq(text):
    """Calculer la fréquence des lettres dans un texte"""
    total = len(text)
    freq = {}
    for char in text.upper():
        if char.isalpha():
            freq[char] = freq.get(char, 0) + 1 / total
    return freq

def score_decryption(decrypted_text):
    """Scorer la qualité du déchiffrement basé sur la fréquence des lettres"""
    decrypted_freq = calculate_text_freq(decrypted_text)
    score = 0
    for char, freq in decrypted_freq.items():
        score += abs(freq - FRENCH_LETTER_FREQ.get(char, 0))
    return -score  # Score négatif pour minimiser la différence

def decrypt_Hill(ciphertext, key, block_size):
    """Déchiffrement avec la clé de Hill"""
    cipher_nums = np.array([letter_to_number(c) for c in ciphertext])
    cipher_nums = cipher_nums.reshape((len(cipher_nums) // block_size, block_size)).T
    
    key_inv = matrix_mod_inverse(key)
    
    decrypted_nums = (np.dot(key_inv, cipher_nums) % 26).T.flatten()
    
    decrypted_text = ''.join([number_to_letter(num) for num in decrypted_nums])
    
    return decrypted_text

def blind_attack_Hill(ciphertext, block_size=2):
    """Attaque aveugle du chiffrement de Hill"""
    best_score = float('-inf')
    best_key = None
    best_decryption = None

    # Générer des clés potentielles
    for key_values in itertools.product(range(26), repeat=block_size*block_size):
        key = np.array(key_values).reshape((block_size, block_size))
        
        # Vérifier l'inversibilité de la clé
        if not is_invertible_mod26(key):
            continue
        
        try:
            # Déchiffrer avec la clé
            decrypted_text = decrypt_Hill(ciphertext, key, block_size)
            
            # Scorer le déchiffrement
            score = score_decryption(decrypted_text)
            
            # Mettre à jour le meilleur résultat
            if score > best_score:
                best_score = score
                best_key = key
                best_decryption = decrypted_text
        
        except Exception:
            continue

    return best_key, best_decryption, best_score

def main():
    # Exemple de ciphertext à déchiffrer
    ciphertext = "XECLTZ"
    block_size = 2

    print("Cryptanalyse aveugle du chiffrement de Hill")
    print("Ciphertext:", ciphertext)

    key, decrypted_text, score = blind_attack_Hill(ciphertext, block_size)
    
    print("\nMeilleure clé trouvée :")
    print(key)
    print("\nTexte déchiffré :", decrypted_text)
    print("Score de vraisemblance :", score)

if __name__ == "__main__":
    main()
'''
'''''
# Chiffrement de Hill avec taille de bloc variable
import numpy as np

# Paramètre global
ALPHABET_SIZE = 26

def pgcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def mod_inverse(a, m):
    for x in range(1, m):
        if (a * x) % m == 1:
            return x
    return -1

def is_inversible(matrix):
    det = int(round(np.linalg.det(matrix))) % ALPHABET_SIZE
    return pgcd(det, ALPHABET_SIZE) == 1

def generate_random_matrix(size):
    while True:
        matrix = np.random.randint(0, ALPHABET_SIZE, (size, size))
        if is_inversible(matrix):
            return matrix

def matrix_mod_inverse(matrix):
    det = int(round(np.linalg.det(matrix))) % ALPHABET_SIZE
    inv_det = mod_inverse(det, ALPHABET_SIZE)
    if inv_det == -1:
        raise ValueError("La matrice n'est pas inversible modulo 26")
    adjugate = np.round(np.linalg.inv(matrix) * np.linalg.det(matrix)).astype(int)
    return (adjugate * inv_det) % ALPHABET_SIZE

def text_to_vector(text, size):
    text = text.upper().replace(" ", "")
    while len(text) % size != 0:
        text += 'X'
    return [ord(char) - ord('A') for char in text]

def vector_to_text(vector):
    return ''.join(chr(v + ord('A')) for v in vector)

def encrypt(plaintext, key):
    size = key.shape[0]
    plaintext_vector = text_to_vector(plaintext, size)
    encrypted_vector = []

    for i in range(0, len(plaintext_vector), size):
        block = np.array(plaintext_vector[i:i+size])
        encrypted_block = np.dot(key, block) % ALPHABET_SIZE
        encrypted_vector.extend(encrypted_block)

    return vector_to_text(encrypted_vector)

def decrypt(ciphertext, key):
    size = key.shape[0]
    ciphertext_vector = text_to_vector(ciphertext, size)
    decrypted_vector = []

    inverse_key = matrix_mod_inverse(key)

    for i in range(0, len(ciphertext_vector), size):
        block = np.array(ciphertext_vector[i:i+size])
        decrypted_block = np.dot(inverse_key, block) % ALPHABET_SIZE
        decrypted_vector.extend(decrypted_block)

    return vector_to_text(decrypted_vector)

if __name__ == "__main__":
    block_size = 4 # Taille du bloc (modifiable)
    #key = generate_random_matrix(block_size)
    key=[[7,15],[24,15]]
    print("Matrice de clé utilisée :")
    print(key)

    message = "LAETYUZPXBXP"

    encrypted_message = encrypt(message, key)
    print(f"Message chiffré : {encrypted_message}")

    decrypted_message = decrypt(encrypted_message, key)
    print(f"Message déchiffré : {decrypted_message}")
'''

'''''
import numpy as np
from sympy import Matrix, mod_inverse
import itertools

# Fréquences des lettres en français
FRENCH_LETTER_FREQ = {
    'E': 0.1772, 'A': 0.0812, 'I': 0.0729, 'N': 0.0691, 'R': 0.0643,
    'S': 0.0630, 'O': 0.0632, 'T': 0.0696, 'L': 0.0496, 'U': 0.0628,
    'D': 0.0350, 'C': 0.0318, 'M': 0.0261, 'P': 0.0246, 'G': 0.0127,
    'B': 0.0119, 'V': 0.0111, 'H': 0.0110, 'F': 0.0110, 'Q': 0.0065,
    'W': 0.0018, 'Z': 0.0016, 'X': 0.0037, 'J': 0.0034, 'Y': 0.0024, 
    'K': 0.0008
}

def letter_to_number(letter):
    return ord(letter.upper()) - ord('A')

def number_to_letter(number):
    return chr(number % 26 + ord('A'))

def is_invertible_mod26(matrix):
    """Vérification rigoureuse de l'inversibilité modulo 26"""
    m = Matrix(matrix)
    det = m.det()
    try:
        mod_inverse(int(det) % 26, 26)
        return True
    except ValueError:
        return False

def matrix_mod_inverse(matrix, modulus=26):
    """Calcul de l'inverse modulaire d'une matrice"""
    m = Matrix(matrix)
    det = m.det()
    
    det_mod = int(det) % modulus
    det_inv = mod_inverse(det_mod, modulus)
    adj = m.adjugate()
    
    inv = (det_inv * adj) % modulus
    return np.array(inv).astype(int)

def calculate_text_freq(text):
    """Calculer la fréquence des lettres dans un texte"""
    total = len(text)
    freq = {}
    for char in text.upper():
        if char.isalpha():
            freq[char] = freq.get(char, 0) + 1 / total
    return freq

def score_decryption(decrypted_text):
    """Scorer la qualité du déchiffrement basé sur la fréquence des lettres"""
    decrypted_freq = calculate_text_freq(decrypted_text)
    score = 0
    for char, freq in decrypted_freq.items():
        score += abs(freq - FRENCH_LETTER_FREQ.get(char, 0))
    return -score  # Score négatif pour minimiser la différence

def decrypt_Hill(ciphertext, key, block_size):
    """Déchiffrement avec la clé de Hill"""
    cipher_nums = np.array([letter_to_number(c) for c in ciphertext])
    cipher_nums = cipher_nums.reshape((len(cipher_nums) // block_size, block_size)).T
    
    key_inv = matrix_mod_inverse(key)
    
    decrypted_nums = (np.dot(key_inv, cipher_nums) % 26).T.flatten()
    
    decrypted_text = ''.join([number_to_letter(num) for num in decrypted_nums])
    
    return decrypted_text

def blind_attack_Hill(ciphertext, block_size=2, top_n=20):
    """Attaque aveugle du chiffrement de Hill avec les top N résultats"""
    possible_decryptions = []

    # Générer des clés potentielles
    for key_values in itertools.product(range(26), repeat=block_size*block_size):
        key = np.array(key_values).reshape((block_size, block_size))
        
        # Vérifier l'inversibilité de la clé
        if not is_invertible_mod26(key):
            continue
        
        try:
            # Déchiffrer avec la clé
            decrypted_text = decrypt_Hill(ciphertext, key, block_size)
            
            # Scorer le déchiffrement
            score = score_decryption(decrypted_text)
            
            # Stocker le résultat
            possible_decryptions.append({
                'key': key,
                'decrypted_text': decrypted_text,
                'score': score
            })
        
        except Exception:
            continue

    # Trier les déchiffrements par score
    possible_decryptions.sort(key=lambda x: x['score'], reverse=True)
    
    return possible_decryptions[:top_n]

def main():
    # Liste des ciphertexts à tester
    ciphertext ="XECLTZ"
    block_size = 2



    # Obtenir les 10 meilleures possibilités
    top_decryptions = blind_attack_Hill(ciphertext, block_size)
        
        # Afficher les résultats
    for i, result in enumerate(top_decryptions, 1):
            print(f"\nPossibilité {i} (Score : {result['score']:.4f}):")
            print("Clé :")
            print(result['key'])
            print("Texte déchiffré :", result['decrypted_text'])

if __name__ == "__main__":
    main()
'''